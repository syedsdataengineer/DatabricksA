-- Query 1: Cost and DBU Consumption per Cluster
SELECT 
    cluster_id,
    cluster_name,
    workspace_id,
    SUM(dbu_hours) AS total_dbu_hours,
    SUM(dbu_hours * dbu_price) AS total_cost_usd,
    COUNT(DISTINCT job_id) AS total_jobs,
    AVG(dbu_hours) AS avg_dbu_per_job,
    MAX(dbu_hours) AS max_dbu_per_job
FROM system.information_schema.compute_warehouses
GROUP BY cluster_id, cluster_name, workspace_id
ORDER BY total_cost_usd DESC;

-- Query 2: Cost Breakdown by Job (ETL Pipelines)
SELECT 
    job_id,
    job_name,
    cluster_id,
    SUM(dbu_hours) AS total_dbu_hours,
    SUM(dbu_hours * dbu_price) AS total_cost_usd,
    COUNT(DISTINCT run_id) AS total_runs,
    AVG(dbu_hours) AS avg_dbu_per_run,
    MAX(dbu_hours) AS max_dbu_per_run
FROM system.information_schema.jobs
GROUP BY job_id, job_name, cluster_id
ORDER BY total_cost_usd DESC;

-- Query 3: DBU Consumption Over Time (Trends)
SELECT 
    DATE_TRUNC('day', start_time) AS date,
    SUM(dbu_hours) AS daily_dbu_hours,
    SUM(dbu_hours * dbu_price) AS daily_cost_usd,
    COUNT(DISTINCT job_id) AS unique_jobs,
    COUNT(DISTINCT cluster_id) AS unique_clusters
FROM system.information_schema.query_history
GROUP BY date
ORDER BY date DESC;

-- Query 4: Idle Cluster Analysis (Clusters with High Idle Time)
SELECT 
    cluster_id,
    cluster_name,
    workspace_id,
    SUM(idle_time) AS total_idle_time_minutes,
    SUM(dbu_hours * dbu_price) AS total_cost_usd,
    (SUM(idle_time) / SUM(active_time)) * 100 AS idle_percentage,
    COUNT(DISTINCT job_id) AS jobs_on_cluster
FROM system.information_schema.clusters
WHERE idle_time > 0
GROUP BY cluster_id, cluster_name, workspace_id
ORDER BY idle_percentage DESC;

-- Query 5: Total Cost by Workspace
SELECT 
    workspace_id,
    workspace_name,
    SUM(dbu_hours * dbu_price) AS total_cost_usd,
    COUNT(DISTINCT cluster_id) AS total_clusters,
    COUNT(DISTINCT job_id) AS total_jobs,
    AVG(dbu_hours) AS avg_dbu_per_cluster
FROM system.information_schema.billing
GROUP BY workspace_id, workspace_name
ORDER BY total_cost_usd DESC;











SELECT 
    c.cluster_id,
    c.cluster_name,
    u.workspace_id,
    u.account_id,
    SUM(u.usage_quantity) AS total_dbu_usage_quantity,
    SUM(
        CAST(u.usage_quantity AS DECIMAL(38,18)) * 
        CAST(get_json_object(p.pricing, '$.default') AS DECIMAL(38,18))
    ) AS total_cost_usd,
    COUNT(DISTINCT job_id) AS total_jobs,
    AVG(u.usage_quantity) AS avg_usage_per_job,
    MAX(u.usage_quantity) AS max_usage_per_job,
    FORMAT_NUMBER(
        SUM(
            CAST(u.usage_quantity AS DECIMAL(38,18)) * 
            CAST(get_json_object(p.pricing, '$.default') AS DECIMAL(38,18))
        ), 
        2
    ) AS formatted_cost_usd
FROM system.billing.usage AS u
JOIN system.compute.clusters AS c
    ON u.workspace_id = c.workspace_id
JOIN system.billing.list_prices AS p
    ON u.account_id = p.account_id
WHERE 
    get_json_object(p.pricing, '$.default') IS NOT NULL  -- Ensures no NULL values
    AND get_json_object(p.pricing, '$.default') != ''  -- Ensures empty values don't break the query
GROUP BY c.cluster_id, c.cluster_name, u.workspace_id, u.account_id
ORDER BY total_cost_usd DESC;










WITH size_types AS (
    SELECT UPPER('2X Small') AS size_name, 9 AS size_sort, 4 AS dbu_h UNION ALL
    SELECT UPPER('X Small') AS size_name, 8 AS size_sort, 6 AS dbu_h UNION ALL
    SELECT UPPER('Small') AS size_name, 7 AS size_sort, 12 AS dbu_h UNION ALL
    SELECT UPPER('Medium') AS size_name, 6 AS size_sort, 24 AS dbu_h UNION ALL
    SELECT UPPER('Large') AS size_name, 5 AS size_sort, 48 AS dbu_h UNION ALL
    SELECT UPPER('X Large') AS size_name, 4 AS size_sort, 80 AS dbu_h UNION ALL
    SELECT UPPER('2X Large') AS size_name, 3 AS size_sort, 144 AS dbu_h UNION ALL
    SELECT UPPER('3X Large') AS size_name, 2 AS size_sort, 272 AS dbu_h UNION ALL
    SELECT UPPER('4X Large') AS size_name, 1 AS size_sort, 528 AS dbu_h
),
workspace_data AS (
    SELECT 'rdm-sandbox' AS workspace_name, 1128502951240290 AS workspace_id UNION ALL
    SELECT 'ds-sandbox' AS workspace_name, 3663651461669439 AS workspace_id UNION ALL
    SELECT 'ds-prod' AS workspace_name, 914424276566136 AS workspace_id UNION ALL
    SELECT 'ds-test' AS workspace_name, 1890840773832743 AS workspace_id UNION ALL
    SELECT 'ghp-sandbox' AS workspace_name, 4014302129856109 AS workspace_id UNION ALL
    SELECT 'adminsys-test' AS workspace_name, 706452946761103 AS workspace_id UNION ALL
    SELECT 'dm-prod' AS workspace_name, 4180416253898875 AS workspace_id UNION ALL
    SELECT 'genomics-core' AS workspace_name, 3743510245844015 AS workspace_id UNION ALL
    SELECT 'dm-test' AS workspace_name, 3856934689648011 AS workspace_id UNION ALL
    SELECT 'dm-sandbox' AS workspace_name, 2587612312334316 AS workspace_id UNION ALL
    SELECT 'genomics-prd' AS workspace_name, 5166230743915737 AS workspace_id UNION ALL
    SELECT 'genomics-stg' AS workspace_name, 8211650618658375 AS workspace_id
),
warehouse_data AS (
    SELECT
        CONCAT('ID-', system.compute_warehouses.workspace_id) AS workspace_name,
        system.compute_warehouses.warehouse_id,
        system.compute_warehouses.warehouse_name,
        system.compute_warehouses.warehouse_type,
        system.compute_warehouses.warehouse_size,
        system.compute_warehouses.dbu_h,
        system.compute_warehouses.min_clusters,
        system.compute_warehouses.max_clusters,
        system.compute_warehouses.dbu_h * system.compute_warehouses.max_clusters AS potential_max_dbu_h,
        system.compute_warehouses.auto_stop_minutes,
        system.compute_warehouses.delete_time
    FROM system.compute_warehouses
    LEFT OUTER JOIN workspace_data ON system.compute_warehouses.workspace_id = workspace_data.workspace_id
    LEFT OUTER JOIN size_types ON system.compute_warehouses.warehouse_size = size_types.size_name
    QUALIFY ROW_NUMBER() OVER (PARTITION BY system.compute_warehouses.warehouse_id ORDER BY system.compute_warehouses.change_time DESC) = 1
    WHERE system.compute_warehouses.delete_time IS NULL
);

SELECT * FROM warehouse_data;
